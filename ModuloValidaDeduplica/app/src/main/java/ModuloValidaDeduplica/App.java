/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ModuloValidaDeduplica;

import QueueModules.RabitConnection;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class App  implements Runnable {
     private RabitConnection conexionRabbit;

    public App(RabitConnection conexionRabbit) {
        this.conexionRabbit = conexionRabbit;
    }

    @Override
    public void run() {
        while (true) {
            try {
                // Obtener formulario JSON desde la cola de mensajes
                String formularioJSON;
                formularioJSON = conexionRabbit.recibirMensaje("CapturaDeDatos");

                // Validar formulario y verificar duplicación
                boolean esValido = validarFormulario(formularioJSON);
                boolean esDuplicado = verificarDuplicado(formularioJSON);

                // Procesar el formulario
                if (!esValido) {
                    almacenarFormularioInvalido(formularioJSON);
                } else if (esDuplicado) {
                    almacenarFormularioDuplicado(formularioJSON);
                } else {
                    enviarDatosAlmacenamiento(formularioJSON);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private boolean validarFormulario(String formularioJSON) {
        // Lógica de validación del formulario (completitud, reglas definidas, etc.)
        // Retorna true si es válido, false si no lo es
        // Ejemplo básico: validar si contiene la clave "Cédula" y si su valor es numérico
        return formularioJSON.contains("\"Cédula\"") && formularioJSON.matches(".*\"Cédula\":\\s*\\d+");
    }

    private boolean verificarDuplicado(String formularioJSON) {
        // Lógica para verificar duplicación en el sistema de almacenamiento
        // Retorna true si está duplicado, false si no lo está
        // (Debes implementar la lógica de verificación de duplicados con tu sistema de almacenamiento)
        return false;
    }

    private void almacenarFormularioInvalido(String formularioJSON) {
        // Almacenar formulario no válido en carpeta local
        guardarEnArchivo(formularioJSON, "FormulariosNoValidos");
    }

    private void almacenarFormularioDuplicado(String formularioJSON) {
        // Almacenar formulario duplicado en carpeta local diferente
        guardarEnArchivo(formularioJSON, "FormulariosDuplicados");
    }

    private void enviarDatosAlmacenamiento(String formularioJSON) {
        // Enviar datos por medio de API REST al módulo de almacenamiento
        // (Implementar lógica para enviar los datos al sistema de almacenamiento)
    }

    public static void crearDirectorioSiNoExiste(String rutaArchivo) {
        File archivo = new File(rutaArchivo);
        File directorio = archivo.getParentFile(); // Obtiene el directorio padre del archivo

        // Verifica si el directorio existe, si no existe, lo crea
        if (!directorio.exists()) {
            boolean directorioCreado = directorio.mkdirs(); // Intenta crear los directorios

            if (directorioCreado) {
                System.out.println("Directorio creado en: " + directorio.getAbsolutePath());
            } else {
                System.out.println("No se pudo crear el directorio.");
            }
        } else {
            System.out.println("El directorio ya existe en: " + directorio.getAbsolutePath());
        }
    }

    private void guardarEnArchivo(String contenido, String nombreCarpeta) {
        if (contenido.isEmpty()) {
            // No hay contenido para guardar, se sale del método
            return;
        }

        try {
            UUID uniqueID = UUID.randomUUID();
            SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy");
            String fechaActual = dateFormat.format(new Date());
            String nombreArchivo = "formulario_" + fechaActual + "_" + uniqueID.toString() + ".json";
            String rutaArchivo = nombreCarpeta + File.separator + nombreArchivo;

            // Verifica si la ruta del archivo existe, si no existe, la crea
            crearDirectorioSiNoExiste(rutaArchivo);

            FileWriter writer = new FileWriter(rutaArchivo); // Usa la ruta completa del archivo
            writer.write(contenido);
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        // Establecer conexión con RabbitMQ
        RabitConnection conexionRabbit = new RabitConnection();

        // Configurar múltiples instancias concurrentes del módulo de validación
        int numeroInstancias = 5;
        ExecutorService executor = Executors.newFixedThreadPool(numeroInstancias);
        for (int i = 0; i < numeroInstancias; i++) {
            executor.execute(new App(conexionRabbit));
        }
    }
}
