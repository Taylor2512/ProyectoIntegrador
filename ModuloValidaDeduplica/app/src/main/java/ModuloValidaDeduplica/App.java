/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ModuloValidaDeduplica;

import Dtos.FormularioCampos;
import QueueModules.RabitConnection;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.BufferedReader;
import java.io.*;

import java.lang.reflect.Field;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class App implements Runnable {

    private RabitConnection conexionRabbit;

    public App(RabitConnection conexionRabbit) {
        this.conexionRabbit = conexionRabbit;
    }

    @Override
    public void run() {
        while (true) {
            try {
                // Obtener formulario JSON desde la cola de mensajes
                String formularioJSON;
                formularioJSON = conexionRabbit.recibirMensaje("CapturaDeDatos");

                // Procesar el formulario
                if (!validarFormulario(formularioJSON)) {
                    almacenarFormularioInvalido(formularioJSON);
                } else if (verificarDuplicado(formularioJSON)) {
                    almacenarFormularioDuplicado(formularioJSON);
                } else {
                    enviarDatosAlmacenamiento(formularioJSON);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private boolean camposSonValidos(Object obj) throws IllegalAccessException {
        for (Field field : obj.getClass().getDeclaredFields()) {
            field.setAccessible(true);
            Object value = field.get(obj);
            if (value == null) {
                return false; // Si encuentra un campo null, retorna false
            }
        }
        return true; // Si todos los campos son diferentes de null, retorna true
    }

    private boolean validarFormulario(String formularioJSON) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            FormularioCampos campos = objectMapper.readValue(formularioJSON, FormularioCampos.class);

            if (!camposSonValidos(campos)) {
                return false;
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false; // Manejo de errores al parsear el JSON
        }

    }

    private boolean verificarDuplicado(String formularioJSON) {
        // Lógica para verificar duplicación en el sistema de almacenamiento
        // Retorna true si está duplicado, false si no lo está
        // (Debes implementar la lógica de verificación de duplicados con tu sistema de almacenamiento)
        return false;
    }

    private void enviarPost(String jsonData, String endpointUrl) {
        try {
            URL url = new URL(endpointUrl);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();

            // Configurar la conexión HTTP
            con.setRequestMethod("POST");
            con.setRequestProperty("Content-Type", "application/json"); // Configurar el Content-Type como application/json
            con.setDoOutput(true);

            // Enviar los datos JSON
            try (DataOutputStream wr = new DataOutputStream(con.getOutputStream())) {
                wr.writeBytes(jsonData);
                wr.flush();
            }

            // Leer la respuesta del servidor (opcional)
            int responseCode = con.getResponseCode();
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            // Puedes utilizar 'responseCode' y 'response.toString()' para manejar la respuesta del servidor
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void almacenarFormularioInvalido(String formularioJSON) {
        // Almacenar formulario no válido en carpeta local
        guardarEnArchivo(formularioJSON, "FormulariosNoValidos");
    }

    private void almacenarFormularioDuplicado(String formularioJSON) {
        // Almacenar formulario duplicado en carpeta local diferente
        guardarEnArchivo(formularioJSON, "FormulariosDuplicados");
    }

    private void enviarDatosAlmacenamiento(String formularioJSON) {
       enviarPost(formularioJSON, "http://localhost:4545/formularios");

    }

    public static void crearDirectorioSiNoExiste(String rutaArchivo) {
        File archivo = new File(rutaArchivo);
        File directorio = archivo.getParentFile(); // Obtiene el directorio padre del archivo

        // Verifica si el directorio existe, si no existe, lo crea
        if (!directorio.exists()) {
            boolean directorioCreado = directorio.mkdirs(); // Intenta crear los directorios

            if (directorioCreado) {
                System.out.println("Directorio creado en: " + directorio.getAbsolutePath());
            } else {
                System.out.println("No se pudo crear el directorio.");
            }
        } else {
            System.out.println("El directorio ya existe en: " + directorio.getAbsolutePath());
        }
    }

    private void guardarEnArchivo(String contenido, String nombreCarpeta) {
        if (contenido.isEmpty()) {
            // No hay contenido para guardar, se sale del método
            return;
        }

        try {
            UUID uniqueID = UUID.randomUUID();
            SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy");
            String fechaActual = dateFormat.format(new Date());
            String nombreArchivo = "formulario_" + fechaActual + "_" + uniqueID.toString() + ".json";
            String rutaArchivo = nombreCarpeta + File.separator + nombreArchivo;

            // Verifica si la ruta del archivo existe, si no existe, la crea
            crearDirectorioSiNoExiste(rutaArchivo);

            FileWriter writer = new FileWriter(rutaArchivo); // Usa la ruta completa del archivo
            writer.write(contenido);
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        // Establecer conexión con RabbitMQ
        RabitConnection conexionRabbit = new RabitConnection();

        // Configurar múltiples instancias concurrentes del módulo de validación
        int numeroInstancias = 5;
        ExecutorService executor = Executors.newFixedThreadPool(numeroInstancias);
        for (int i = 0; i < numeroInstancias; i++) {
            executor.execute(new App(conexionRabbit));
        }
    }
}
